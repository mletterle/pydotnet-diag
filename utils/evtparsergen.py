import sys
import os
from datetime import datetime
import xml.etree.ElementTree as ET

ns = {'': 'http://schemas.microsoft.com/win/2004/08/events'}
strings = {}
providers = {}

def generate_parsers(manifest):
    parse_manifest(manifest)
    generate_file(manifest)

def generate_file(manifest):
    parser = os.path.basename(manifest)
    source = os.path.abspath(manifest)
    src_git_dir = os.popen(f'git -C {os.path.dirname(source)} rev-parse --show-toplevel').read().replace('\n', '')
    rel_git_dir = os.path.relpath(source, src_git_dir)
    src_git_remote = os.popen(f'git -C {os.path.dirname(source)} remote get-url origin').read().replace('\n', '')
    src_git_describe = os.popen(f'git -C {os.path.dirname(source)} describe --tags').read().replace('\n', '')
    this_git_hash = os.popen('git rev-parse --short HEAD').read().replace('\n', '')

    if parser.endswith('.xml'): parser = parser[:-4]
    parser = os.path.splitext(parser)[0]
    os.makedirs("parsers", exist_ok=True)

    with open(f"parsers/{parser}.py", 'w') as parser:
        parser.write("### THIS IS AUTOGENERATED CODE\n")
        parser.write(f"### Generated: {datetime.strftime(datetime.now(), '%Y%m%d %H:%M:%S')}\n")
        parser.write(f"### Generated by: {__file__}-{this_git_hash}\n")
        parser.write(f"### Generated from: {src_git_remote}/blob/{src_git_describe}/{rel_git_dir}\n\n")
        parser.write("from ..utils import *\n\n")
        for provider_name in providers:
            provider = providers[provider_name]
            for event_id in provider['events']:
                event = provider['events'][event_id]
                event_template = event['template']
                template = provider['templates'][event_template]
                safe_provider_name = provider_name.replace('-', '_')
                parser.write(f"def get_{safe_provider_name}_{event_id}_op_code():\n")
                parser.write(f"\treturn '{event['op_code']}'\n\n")
                parser.write(f"def read_{safe_provider_name}_{event_id}_payload(buf):\n")
                parser.write(f"\tret = {{}}\n")
                for data in template:
                    parser.write(f"\tret['{data['name']}'] = read_win_type(buf, '{data['in']}')\n")
                parser.write("\treturn ret\n\n")

def parse_manifest(manifest):
    xml = ET.parse(manifest).getroot()

    for s in xml.findall(".//localization/resources[@culture='en-US']/stringTable/string", ns):
        strings[s.attrib['id']] = s.attrib['value']

    for p in xml.findall('.//events/provider', ns):
        provider = {}
        providers[p.attrib['name']] = provider

        provider['events'] = {}
        for e in p.findall("./events/event", ns):
            if 'template' not in e.attrib: continue # Some events don't have templates, these seem to be "obsolete" events
            event = {'symbol': e.attrib['symbol'], 'version': e.attrib['version']}
            event['level'] = e.attrib['level'] if 'level' in e.attrib else None
            event['template'] = e.attrib['template'] if 'template' in e.attrib else None
            event['message'] = e.attrib['message'] if 'message' in e.attrib else None
            event['keywords'] = e.attrib['keywords'].split(' ') if 'keywords' in e.attrib else []
            event['op_code'] = e.attrib['opcode'] if 'opcode' in e.attrib else None
            event['task'] = e.attrib['task'] if 'task' in e.attrib else None
            provider['events'][int(e.attrib['value'])] = event

        provider['keywords'] = {}
        for k in p.findall("./keywords/keyword", ns):
            keyword = {'mask': int(k.attrib['mask'], 0), 'message': k.attrib['message'], 'symbol': k.attrib['symbol']}
            provider['keywords'][k.attrib['name']] = keyword

        provider['tasks'] = {}
        for t in p.findall("./tasks/task", ns):
            task = {'name': t.attrib['name'], 'symbol': t.attrib['symbol'] if 'symbol' in t.attrib else None, 'message': t.attrib['message'] if 'message' in t.attrib else None, 'op_codes': {}}
            provider['tasks'][int(t.attrib['value'])] = task
            for o in t.findall('./opcodes/opcode', ns):
                op_code = {'name': o.attrib['name'], 'symbol': o.attrib['symbol'], 'message': o.attrib['message']}
                task['op_codes'][int(o.attrib['value'])] = op_code

        provider['maps'] = {}
        for m in p.findall("./maps/", ns):
            mapType = m.tag.split('}')[1]
            mp = {'type': mapType, 'map': {}}
            provider['maps'][m.attrib['name']] = mp
            for subm in m.findall("./map", ns):
                mp['map'][int(subm.attrib['value'], 0)] = subm.attrib['message']

        provider['templates'] = {}
        for t in p.findall("./templates/template", ns):
            template = []
            for d in t.findall("./data", ns):
                data = {'name': d.attrib['name'], 'in': d.attrib['inType'], 'out': d.attrib['outType'] if 'outType' in d.attrib else None}
                template.append(data)
            provider['templates'][t.attrib['tid']] = template

if __name__ == "__main__":
    generate_parsers(sys.argv[1])
